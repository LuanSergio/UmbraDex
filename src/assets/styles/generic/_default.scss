@use 'tools/get-color' as *;
@use 'tools/index' as *;
@use 'settings/colors-type' as typeColors;
@use 'settings/_breakpoints' as *;

@use 'sass:map';


:root {
  --base-font-size: 0.85em;
  --header-height: 4.8125rem;
  --screen-height: 100vh;
  --theme-color: #fbfbfb;
  --theme-color-light: #fbfbfb;
  --theme-text: #323232;
}

*,
*::before,
*::after {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizelegibility;
  user-select: none;
}

html {
  font-size: var(--base-font-size);
}

html,
body {
  font-family: Roboto, Helvetica, sans-serif;
}

body {
  --current-body-background: #21285a;

  background-color: var(--current-body-background);
}

.body-transition {
  transition: background-color 0.28s ease-out;
}

ul {
  list-style: none;
  padding-left: 0;
}

button {
  cursor: pointer;

  &:disabled {
    cursor: not-allowed;
  }
}

.light {
  --theme-color: #fbfbfb;
  --theme-color-light: #fbfbfb;
  --theme-text: #323232;
}

.dark {
  --theme-color: #1a1f3e;
  --theme-color-light: #21285a;
  --theme-text: #fbfbfb;
}

@each $type, $color in typeColors.$defaults {
  body.#{$type} {
    --current-light-type-color: #{map.get(typeColors.$lights, $type)};
    --current-dark-type-color: #{map.get(typeColors.$darks, $type)};
    --current-type-color: #{map.get(typeColors.$defaults, $type)};
    --current-body-background: #{map.get(typeColors.$lights, $type)};
  }
}

@media only screen and (min-width: $xs) {
  :root {
  --base-font-size: 1em;
  }
}