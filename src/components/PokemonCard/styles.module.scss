@use 'tools/index' as *;
@use 'helpers/icon.scss' as *;
@use 'settings/colors-type' as typeColors;
@use 'animations/pop-in' as *;
@use 'animations/_rotating' as *;
@use 'animations/_scale-highlight' as *;
@use 'sass:map';

.card {
  align-items: center;

  // animation-duration: 0.5s;
  // animation-fill-mode: forwards;
  // animation-iteration-count: 1;

  // animation-name: pop-in;
  border-radius: 12px;
  cursor: pointer;
  display: flex;
  flex-direction: column;
  height: rem(322.68);
  justify-content: center;
  padding: rem(10) rem(32);
  position: relative;
  width: rem(286);
}

.background {
  border-radius: 13px;
  height: rem(322.68);
  position: absolute;
  transition: opacity ease-out 0.15s, transform ease-out 0.15s,
    box-shadow ease-out 0.25s;
  width: rem(286);
}

.card:hover .background {
  opacity: 0.83;
  transform: translateY(rem(-2));
}

.number {
  color: get-color(light);
  font-size: rem(22);
  font-weight: bold;
  margin-bottom: 0;
  margin-top: 0;
  position: absolute;
  top: rem(10);
  z-index: get-index-level(lvl2);
}

.pokemonContainer {
  overflow-x: visible;
  position: relative;
}

.pokeball {
  color: var(--theme-color-light);
  display: block;
  height: rem(172.67);
  position: absolute;
  right: rem(-6);
  top: rem(7);
  transition: ease-out 0.2s;
  width: rem(167.28);
  z-index: get-index-level(lvl1);
}

.card:hover .pokeball {
  animation-duration: 2.8s;
  animation-iteration-count: infinite;
  animation-name: rotating;
  animation-timing-function: linear;
}

.pokemon {
  position: relative;
  z-index: get-index-level(lvl2);
}

.card:hover .pokemon {
  animation-duration: 0.2s;
  animation-fill-mode: forwards;
  animation-iteration-count: 1;
  animation-name: scale-highlight;
  animation-timing-function: ease;
}

.name {
  background-color: get-color(light);
  border-radius: 6px;
  bottom: 0;
  display: block;
  font-family: Roboto, Helvetica, sans-serif;
  font-size: rem(22);
  font-weight: bold;
  left: 50%;
  margin-bottom: 0;
  margin-top: 0;
  padding: rem(6) rem(17);
  position: absolute;
  text-align: center;
  text-transform: capitalize;
  transform: translate(-50%, 36%);
  transition: ease-out 0.2s;
  white-space: nowrap;
  z-index: get-index-level(lvl2);
}

.typeContainer {
  align-items: center;
  bottom: 0;
  display: flex;
  justify-content: center;
  position: absolute;
  transform: translateY(40%);
  z-index: get-index-level(lvl2);
}

.typeContainer > *:not(:last-child) {
  margin-right: rem(6);
}

@each $type, $color in typeColors.$defaults {
  .background.#{$type} {
    background: map.get(typeColors.$gradient, $type);
  }

  .name.#{$type} {
    color: $color;
  }
}
